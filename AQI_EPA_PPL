{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"17-Cp5kVMSGLnwdjw03hAwY85DmNR06Kb","timestamp":1688744638591}],"authorship_tag":"ABX9TyMXhLtHx3oCVoInaRlhFfzF"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["## Integrate the EPA and PPL Data"],"metadata":{"id":"M6vwD8Ti9NWw"}},{"cell_type":"markdown","source":["This notebook demonstrates the integration of EPA and PPL data. It also establishes a function of PPL data as a function of EPA data (The EPA data is considered as a ground truth)."],"metadata":{"id":"rzQL2JCoA3-_"}},{"cell_type":"markdown","source":["User-defined variables"],"metadata":{"id":"exAJUs7WA9BC"}},{"cell_type":"code","source":["# EPA data\n","infile_epa = 'drive/MyDrive/epa_chicago_20230626.csv'\n","\n","# Purple Air data\n","infile_ppl = 'drive/MyDrive/purpleair_chicago_20230626.csv'\n","\n","# Output file\n","file_ppl2epa ='drive/MyDrive/ppl2epa.pkl'"],"metadata":{"id":"XvV9-PSwA8gB","executionInfo":{"status":"ok","timestamp":1689230023045,"user_tz":240,"elapsed":133,"user":{"displayName":"Haruko Wainwright","userId":"12720531295762262890"}}},"execution_count":48,"outputs":[]},{"cell_type":"markdown","source":["## Set up the Google Colab Environment"],"metadata":{"id":"yZ-OHjzb9Ipe"}},{"cell_type":"code","source":["pip install gpcam"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"B-9ol8hf9VVy","outputId":"de0705dc-3226-4c5b-e156-2f6de5c1a371","executionInfo":{"status":"ok","timestamp":1689227748643,"user_tz":240,"elapsed":4046,"user":{"displayName":"Haruko Wainwright","userId":"12720531295762262890"}}},"execution_count":10,"outputs":[{"output_type":"stream","name":"stdout","text":["Requirement already satisfied: gpcam in /usr/local/lib/python3.10/dist-packages (7.4.10)\n","Requirement already satisfied: wheel in /usr/local/lib/python3.10/dist-packages (from gpcam) (0.40.0)\n","Requirement already satisfied: numpy in /usr/local/lib/python3.10/dist-packages (from gpcam) (1.22.4)\n","Requirement already satisfied: scipy==1.9.1 in /usr/local/lib/python3.10/dist-packages (from gpcam) (1.9.1)\n","Requirement already satisfied: matplotlib in /usr/local/lib/python3.10/dist-packages (from gpcam) (3.7.1)\n","Requirement already satisfied: torch>=1.9.0 in /usr/local/lib/python3.10/dist-packages (from gpcam) (2.0.1+cu118)\n","Requirement already satisfied: pandas in /usr/local/lib/python3.10/dist-packages (from gpcam) (1.5.3)\n","Requirement already satisfied: ophyd in /usr/local/lib/python3.10/dist-packages (from gpcam) (1.8.0)\n","Requirement already satisfied: dask>=2021.6.2 in /usr/local/lib/python3.10/dist-packages (from gpcam) (2022.12.1)\n","Requirement already satisfied: distributed>=2021.6.2 in /usr/local/lib/python3.10/dist-packages (from gpcam) (2022.12.1)\n","Requirement already satisfied: zmq in /usr/local/lib/python3.10/dist-packages (from gpcam) (0.0.0)\n","Requirement already satisfied: fvgp==3.3.8 in /usr/local/lib/python3.10/dist-packages (from gpcam) (3.3.8)\n","Requirement already satisfied: plotly in /usr/local/lib/python3.10/dist-packages (from gpcam) (5.13.1)\n","Requirement already satisfied: notebook in /usr/local/lib/python3.10/dist-packages (from gpcam) (6.4.8)\n","Requirement already satisfied: loguru in /usr/local/lib/python3.10/dist-packages (from gpcam) (0.7.0)\n","Requirement already satisfied: versioneer in /usr/local/lib/python3.10/dist-packages (from fvgp==3.3.8->gpcam) (0.29)\n","Requirement already satisfied: hgdl==2.0.7 in /usr/local/lib/python3.10/dist-packages (from fvgp==3.3.8->gpcam) (2.0.7)\n","Requirement already satisfied: nbformat in /usr/local/lib/python3.10/dist-packages (from hgdl==2.0.7->fvgp==3.3.8->gpcam) (5.9.0)\n","Requirement already satisfied: bokeh in /usr/local/lib/python3.10/dist-packages (from hgdl==2.0.7->fvgp==3.3.8->gpcam) (2.4.3)\n","Requirement already satisfied: paramiko in /usr/local/lib/python3.10/dist-packages (from hgdl==2.0.7->fvgp==3.3.8->gpcam) (3.2.0)\n","Requirement already satisfied: click>=7.0 in /usr/local/lib/python3.10/dist-packages (from dask>=2021.6.2->gpcam) (8.1.4)\n","Requirement already satisfied: cloudpickle>=1.1.1 in /usr/local/lib/python3.10/dist-packages (from dask>=2021.6.2->gpcam) (2.2.1)\n","Requirement already satisfied: fsspec>=0.6.0 in /usr/local/lib/python3.10/dist-packages (from dask>=2021.6.2->gpcam) (2023.6.0)\n","Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.10/dist-packages (from dask>=2021.6.2->gpcam) (23.1)\n","Requirement already satisfied: partd>=0.3.10 in /usr/local/lib/python3.10/dist-packages (from dask>=2021.6.2->gpcam) (1.4.0)\n","Requirement already satisfied: pyyaml>=5.3.1 in /usr/local/lib/python3.10/dist-packages (from dask>=2021.6.2->gpcam) (6.0)\n","Requirement already satisfied: toolz>=0.8.2 in /usr/local/lib/python3.10/dist-packages (from dask>=2021.6.2->gpcam) (0.12.0)\n","Requirement already satisfied: jinja2 in /usr/local/lib/python3.10/dist-packages (from distributed>=2021.6.2->gpcam) (3.1.2)\n","Requirement already satisfied: locket>=1.0.0 in /usr/local/lib/python3.10/dist-packages (from distributed>=2021.6.2->gpcam) (1.0.0)\n","Requirement already satisfied: msgpack>=0.6.0 in /usr/local/lib/python3.10/dist-packages (from distributed>=2021.6.2->gpcam) (1.0.5)\n","Requirement already satisfied: psutil>=5.0 in /usr/local/lib/python3.10/dist-packages (from distributed>=2021.6.2->gpcam) (5.9.5)\n","Requirement already satisfied: sortedcontainers!=2.0.0,!=2.0.1 in /usr/local/lib/python3.10/dist-packages (from distributed>=2021.6.2->gpcam) (2.4.0)\n","Requirement already satisfied: tblib>=1.6.0 in /usr/local/lib/python3.10/dist-packages (from distributed>=2021.6.2->gpcam) (2.0.0)\n","Requirement already satisfied: tornado>=6.0.3 in /usr/local/lib/python3.10/dist-packages (from distributed>=2021.6.2->gpcam) (6.3.1)\n","Requirement already satisfied: urllib3 in /usr/local/lib/python3.10/dist-packages (from distributed>=2021.6.2->gpcam) (1.26.16)\n","Requirement already satisfied: zict>=0.1.3 in /usr/local/lib/python3.10/dist-packages (from distributed>=2021.6.2->gpcam) (3.0.0)\n","Requirement already satisfied: filelock in /usr/local/lib/python3.10/dist-packages (from torch>=1.9.0->gpcam) (3.12.2)\n","Requirement already satisfied: typing-extensions in /usr/local/lib/python3.10/dist-packages (from torch>=1.9.0->gpcam) (4.7.1)\n","Requirement already satisfied: sympy in /usr/local/lib/python3.10/dist-packages (from torch>=1.9.0->gpcam) (1.11.1)\n","Requirement already satisfied: networkx in /usr/local/lib/python3.10/dist-packages (from torch>=1.9.0->gpcam) (3.1)\n","Requirement already satisfied: triton==2.0.0 in /usr/local/lib/python3.10/dist-packages (from torch>=1.9.0->gpcam) (2.0.0)\n","Requirement already satisfied: cmake in /usr/local/lib/python3.10/dist-packages (from triton==2.0.0->torch>=1.9.0->gpcam) (3.25.2)\n","Requirement already satisfied: lit in /usr/local/lib/python3.10/dist-packages (from triton==2.0.0->torch>=1.9.0->gpcam) (16.0.6)\n","Requirement already satisfied: contourpy>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib->gpcam) (1.1.0)\n","Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.10/dist-packages (from matplotlib->gpcam) (0.11.0)\n","Requirement already satisfied: fonttools>=4.22.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib->gpcam) (4.40.0)\n","Requirement already satisfied: kiwisolver>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib->gpcam) (1.4.4)\n","Requirement already satisfied: pillow>=6.2.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib->gpcam) (8.4.0)\n","Requirement already satisfied: pyparsing>=2.3.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib->gpcam) (3.1.0)\n","Requirement already satisfied: python-dateutil>=2.7 in /usr/local/lib/python3.10/dist-packages (from matplotlib->gpcam) (2.8.2)\n","Requirement already satisfied: pyzmq>=17 in /usr/local/lib/python3.10/dist-packages (from notebook->gpcam) (23.2.1)\n","Requirement already satisfied: argon2-cffi in /usr/local/lib/python3.10/dist-packages (from notebook->gpcam) (21.3.0)\n","Requirement already satisfied: ipython-genutils in /usr/local/lib/python3.10/dist-packages (from notebook->gpcam) (0.2.0)\n","Requirement already satisfied: traitlets>=4.2.1 in /usr/local/lib/python3.10/dist-packages (from notebook->gpcam) (5.7.1)\n","Requirement already satisfied: jupyter-core>=4.6.1 in /usr/local/lib/python3.10/dist-packages (from notebook->gpcam) (5.3.1)\n","Requirement already satisfied: jupyter-client>=5.3.4 in /usr/local/lib/python3.10/dist-packages (from notebook->gpcam) (6.1.12)\n","Requirement already satisfied: nbconvert in /usr/local/lib/python3.10/dist-packages (from notebook->gpcam) (6.5.4)\n","Requirement already satisfied: nest-asyncio>=1.5 in /usr/local/lib/python3.10/dist-packages (from notebook->gpcam) (1.5.6)\n","Requirement already satisfied: ipykernel in /usr/local/lib/python3.10/dist-packages (from notebook->gpcam) (5.5.6)\n","Requirement already satisfied: Send2Trash>=1.8.0 in /usr/local/lib/python3.10/dist-packages (from notebook->gpcam) (1.8.2)\n","Requirement already satisfied: terminado>=0.8.3 in /usr/local/lib/python3.10/dist-packages (from notebook->gpcam) (0.17.1)\n","Requirement already satisfied: prometheus-client in /usr/local/lib/python3.10/dist-packages (from notebook->gpcam) (0.17.0)\n","Requirement already satisfied: pint in /usr/local/lib/python3.10/dist-packages (from ophyd->gpcam) (0.22)\n","Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.10/dist-packages (from pandas->gpcam) (2022.7.1)\n","Requirement already satisfied: tenacity>=6.2.0 in /usr/local/lib/python3.10/dist-packages (from plotly->gpcam) (8.2.2)\n","Requirement already satisfied: platformdirs>=2.5 in /usr/local/lib/python3.10/dist-packages (from jupyter-core>=4.6.1->notebook->gpcam) (3.8.1)\n","Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.10/dist-packages (from python-dateutil>=2.7->matplotlib->gpcam) (1.16.0)\n","Requirement already satisfied: ptyprocess in /usr/local/lib/python3.10/dist-packages (from terminado>=0.8.3->notebook->gpcam) (0.7.0)\n","Requirement already satisfied: argon2-cffi-bindings in /usr/local/lib/python3.10/dist-packages (from argon2-cffi->notebook->gpcam) (21.2.0)\n","Requirement already satisfied: ipython>=5.0.0 in /usr/local/lib/python3.10/dist-packages (from ipykernel->notebook->gpcam) (7.34.0)\n","Requirement already satisfied: MarkupSafe>=2.0 in /usr/local/lib/python3.10/dist-packages (from jinja2->distributed>=2021.6.2->gpcam) (2.1.3)\n","Requirement already satisfied: lxml in /usr/local/lib/python3.10/dist-packages (from nbconvert->notebook->gpcam) (4.9.3)\n","Requirement already satisfied: beautifulsoup4 in /usr/local/lib/python3.10/dist-packages (from nbconvert->notebook->gpcam) (4.11.2)\n","Requirement already satisfied: bleach in /usr/local/lib/python3.10/dist-packages (from nbconvert->notebook->gpcam) (6.0.0)\n","Requirement already satisfied: defusedxml in /usr/local/lib/python3.10/dist-packages (from nbconvert->notebook->gpcam) (0.7.1)\n","Requirement already satisfied: entrypoints>=0.2.2 in /usr/local/lib/python3.10/dist-packages (from nbconvert->notebook->gpcam) (0.4)\n","Requirement already satisfied: jupyterlab-pygments in /usr/local/lib/python3.10/dist-packages (from nbconvert->notebook->gpcam) (0.2.2)\n","Requirement already satisfied: mistune<2,>=0.8.1 in /usr/local/lib/python3.10/dist-packages (from nbconvert->notebook->gpcam) (0.8.4)\n","Requirement already satisfied: nbclient>=0.5.0 in /usr/local/lib/python3.10/dist-packages (from nbconvert->notebook->gpcam) (0.8.0)\n","Requirement already satisfied: pandocfilters>=1.4.1 in /usr/local/lib/python3.10/dist-packages (from nbconvert->notebook->gpcam) (1.5.0)\n","Requirement already satisfied: pygments>=2.4.1 in /usr/local/lib/python3.10/dist-packages (from nbconvert->notebook->gpcam) (2.14.0)\n","Requirement already satisfied: tinycss2 in /usr/local/lib/python3.10/dist-packages (from nbconvert->notebook->gpcam) (1.2.1)\n","Requirement already satisfied: fastjsonschema in /usr/local/lib/python3.10/dist-packages (from nbformat->hgdl==2.0.7->fvgp==3.3.8->gpcam) (2.17.1)\n","Requirement already satisfied: jsonschema>=2.6 in /usr/local/lib/python3.10/dist-packages (from nbformat->hgdl==2.0.7->fvgp==3.3.8->gpcam) (4.3.3)\n","Requirement already satisfied: mpmath>=0.19 in /usr/local/lib/python3.10/dist-packages (from sympy->torch>=1.9.0->gpcam) (1.3.0)\n","Requirement already satisfied: setuptools>=18.5 in /usr/local/lib/python3.10/dist-packages (from ipython>=5.0.0->ipykernel->notebook->gpcam) (67.7.2)\n","Requirement already satisfied: jedi>=0.16 in /usr/local/lib/python3.10/dist-packages (from ipython>=5.0.0->ipykernel->notebook->gpcam) (0.18.2)\n","Requirement already satisfied: decorator in /usr/local/lib/python3.10/dist-packages (from ipython>=5.0.0->ipykernel->notebook->gpcam) (4.4.2)\n","Requirement already satisfied: pickleshare in /usr/local/lib/python3.10/dist-packages (from ipython>=5.0.0->ipykernel->notebook->gpcam) (0.7.5)\n","Requirement already satisfied: prompt-toolkit!=3.0.0,!=3.0.1,<3.1.0,>=2.0.0 in /usr/local/lib/python3.10/dist-packages (from ipython>=5.0.0->ipykernel->notebook->gpcam) (3.0.39)\n","Requirement already satisfied: backcall in /usr/local/lib/python3.10/dist-packages (from ipython>=5.0.0->ipykernel->notebook->gpcam) (0.2.0)\n","Requirement already satisfied: matplotlib-inline in /usr/local/lib/python3.10/dist-packages (from ipython>=5.0.0->ipykernel->notebook->gpcam) (0.1.6)\n","Requirement already satisfied: pexpect>4.3 in /usr/local/lib/python3.10/dist-packages (from ipython>=5.0.0->ipykernel->notebook->gpcam) (4.8.0)\n","Requirement already satisfied: attrs>=17.4.0 in /usr/local/lib/python3.10/dist-packages (from jsonschema>=2.6->nbformat->hgdl==2.0.7->fvgp==3.3.8->gpcam) (23.1.0)\n","Requirement already satisfied: pyrsistent!=0.17.0,!=0.17.1,!=0.17.2,>=0.14.0 in /usr/local/lib/python3.10/dist-packages (from jsonschema>=2.6->nbformat->hgdl==2.0.7->fvgp==3.3.8->gpcam) (0.19.3)\n","Requirement already satisfied: cffi>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from argon2-cffi-bindings->argon2-cffi->notebook->gpcam) (1.15.1)\n","Requirement already satisfied: soupsieve>1.2 in /usr/local/lib/python3.10/dist-packages (from beautifulsoup4->nbconvert->notebook->gpcam) (2.4.1)\n","Requirement already satisfied: webencodings in /usr/local/lib/python3.10/dist-packages (from bleach->nbconvert->notebook->gpcam) (0.5.1)\n","Requirement already satisfied: bcrypt>=3.2 in /usr/local/lib/python3.10/dist-packages (from paramiko->hgdl==2.0.7->fvgp==3.3.8->gpcam) (4.0.1)\n","Requirement already satisfied: cryptography>=3.3 in /usr/local/lib/python3.10/dist-packages (from paramiko->hgdl==2.0.7->fvgp==3.3.8->gpcam) (41.0.2)\n","Requirement already satisfied: pynacl>=1.5 in /usr/local/lib/python3.10/dist-packages (from paramiko->hgdl==2.0.7->fvgp==3.3.8->gpcam) (1.5.0)\n","Requirement already satisfied: pycparser in /usr/local/lib/python3.10/dist-packages (from cffi>=1.0.1->argon2-cffi-bindings->argon2-cffi->notebook->gpcam) (2.21)\n","Requirement already satisfied: parso<0.9.0,>=0.8.0 in /usr/local/lib/python3.10/dist-packages (from jedi>=0.16->ipython>=5.0.0->ipykernel->notebook->gpcam) (0.8.3)\n","Requirement already satisfied: wcwidth in /usr/local/lib/python3.10/dist-packages (from prompt-toolkit!=3.0.0,!=3.0.1,<3.1.0,>=2.0.0->ipython>=5.0.0->ipykernel->notebook->gpcam) (0.2.6)\n"]}]},{"cell_type":"code","source":["pip install ipyleaflet"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"BesnBuGPT2dc","executionInfo":{"status":"ok","timestamp":1689227757467,"user_tz":240,"elapsed":8826,"user":{"displayName":"Haruko Wainwright","userId":"12720531295762262890"}},"outputId":"ca88098f-1de1-4976-e25f-5209f8bbaaa2"},"execution_count":11,"outputs":[{"output_type":"stream","name":"stdout","text":["Requirement already satisfied: ipyleaflet in /usr/local/lib/python3.10/dist-packages (0.17.3)\n","Requirement already satisfied: ipywidgets<9,>=7.6.0 in /usr/local/lib/python3.10/dist-packages (from ipyleaflet) (7.7.1)\n","Requirement already satisfied: traittypes<3,>=0.2.1 in /usr/local/lib/python3.10/dist-packages (from ipyleaflet) (0.2.1)\n","Requirement already satisfied: xyzservices>=2021.8.1 in /usr/local/lib/python3.10/dist-packages (from ipyleaflet) (2023.5.0)\n","Requirement already satisfied: branca>=0.5.0 in /usr/local/lib/python3.10/dist-packages (from ipyleaflet) (0.6.0)\n","Requirement already satisfied: jinja2 in /usr/local/lib/python3.10/dist-packages (from branca>=0.5.0->ipyleaflet) (3.1.2)\n","Requirement already satisfied: ipykernel>=4.5.1 in /usr/local/lib/python3.10/dist-packages (from ipywidgets<9,>=7.6.0->ipyleaflet) (5.5.6)\n","Requirement already satisfied: ipython-genutils~=0.2.0 in /usr/local/lib/python3.10/dist-packages (from ipywidgets<9,>=7.6.0->ipyleaflet) (0.2.0)\n","Requirement already satisfied: traitlets>=4.3.1 in /usr/local/lib/python3.10/dist-packages (from ipywidgets<9,>=7.6.0->ipyleaflet) (5.7.1)\n","Requirement already satisfied: widgetsnbextension~=3.6.0 in /usr/local/lib/python3.10/dist-packages (from ipywidgets<9,>=7.6.0->ipyleaflet) (3.6.4)\n","Requirement already satisfied: ipython>=4.0.0 in /usr/local/lib/python3.10/dist-packages (from ipywidgets<9,>=7.6.0->ipyleaflet) (7.34.0)\n","Requirement already satisfied: jupyterlab-widgets>=1.0.0 in /usr/local/lib/python3.10/dist-packages (from ipywidgets<9,>=7.6.0->ipyleaflet) (3.0.8)\n","Requirement already satisfied: jupyter-client in /usr/local/lib/python3.10/dist-packages (from ipykernel>=4.5.1->ipywidgets<9,>=7.6.0->ipyleaflet) (6.1.12)\n","Requirement already satisfied: tornado>=4.2 in /usr/local/lib/python3.10/dist-packages (from ipykernel>=4.5.1->ipywidgets<9,>=7.6.0->ipyleaflet) (6.3.1)\n","Requirement already satisfied: setuptools>=18.5 in /usr/local/lib/python3.10/dist-packages (from ipython>=4.0.0->ipywidgets<9,>=7.6.0->ipyleaflet) (67.7.2)\n","Requirement already satisfied: jedi>=0.16 in /usr/local/lib/python3.10/dist-packages (from ipython>=4.0.0->ipywidgets<9,>=7.6.0->ipyleaflet) (0.18.2)\n","Requirement already satisfied: decorator in /usr/local/lib/python3.10/dist-packages (from ipython>=4.0.0->ipywidgets<9,>=7.6.0->ipyleaflet) (4.4.2)\n","Requirement already satisfied: pickleshare in /usr/local/lib/python3.10/dist-packages (from ipython>=4.0.0->ipywidgets<9,>=7.6.0->ipyleaflet) (0.7.5)\n","Requirement already satisfied: prompt-toolkit!=3.0.0,!=3.0.1,<3.1.0,>=2.0.0 in /usr/local/lib/python3.10/dist-packages (from ipython>=4.0.0->ipywidgets<9,>=7.6.0->ipyleaflet) (3.0.39)\n","Requirement already satisfied: pygments in /usr/local/lib/python3.10/dist-packages (from ipython>=4.0.0->ipywidgets<9,>=7.6.0->ipyleaflet) (2.14.0)\n","Requirement already satisfied: backcall in /usr/local/lib/python3.10/dist-packages (from ipython>=4.0.0->ipywidgets<9,>=7.6.0->ipyleaflet) (0.2.0)\n","Requirement already satisfied: matplotlib-inline in /usr/local/lib/python3.10/dist-packages (from ipython>=4.0.0->ipywidgets<9,>=7.6.0->ipyleaflet) (0.1.6)\n","Requirement already satisfied: pexpect>4.3 in /usr/local/lib/python3.10/dist-packages (from ipython>=4.0.0->ipywidgets<9,>=7.6.0->ipyleaflet) (4.8.0)\n","Requirement already satisfied: notebook>=4.4.1 in /usr/local/lib/python3.10/dist-packages (from widgetsnbextension~=3.6.0->ipywidgets<9,>=7.6.0->ipyleaflet) (6.4.8)\n","Requirement already satisfied: MarkupSafe>=2.0 in /usr/local/lib/python3.10/dist-packages (from jinja2->branca>=0.5.0->ipyleaflet) (2.1.3)\n","Requirement already satisfied: parso<0.9.0,>=0.8.0 in /usr/local/lib/python3.10/dist-packages (from jedi>=0.16->ipython>=4.0.0->ipywidgets<9,>=7.6.0->ipyleaflet) (0.8.3)\n","Requirement already satisfied: pyzmq>=17 in /usr/local/lib/python3.10/dist-packages (from notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets<9,>=7.6.0->ipyleaflet) (23.2.1)\n","Requirement already satisfied: argon2-cffi in /usr/local/lib/python3.10/dist-packages (from notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets<9,>=7.6.0->ipyleaflet) (21.3.0)\n","Requirement already satisfied: jupyter-core>=4.6.1 in /usr/local/lib/python3.10/dist-packages (from notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets<9,>=7.6.0->ipyleaflet) (5.3.1)\n","Requirement already satisfied: nbformat in /usr/local/lib/python3.10/dist-packages (from notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets<9,>=7.6.0->ipyleaflet) (5.9.0)\n","Requirement already satisfied: nbconvert in /usr/local/lib/python3.10/dist-packages (from notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets<9,>=7.6.0->ipyleaflet) (6.5.4)\n","Requirement already satisfied: nest-asyncio>=1.5 in /usr/local/lib/python3.10/dist-packages (from notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets<9,>=7.6.0->ipyleaflet) (1.5.6)\n","Requirement already satisfied: Send2Trash>=1.8.0 in /usr/local/lib/python3.10/dist-packages (from notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets<9,>=7.6.0->ipyleaflet) (1.8.2)\n","Requirement already satisfied: terminado>=0.8.3 in /usr/local/lib/python3.10/dist-packages (from notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets<9,>=7.6.0->ipyleaflet) (0.17.1)\n","Requirement already satisfied: prometheus-client in /usr/local/lib/python3.10/dist-packages (from notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets<9,>=7.6.0->ipyleaflet) (0.17.0)\n","Requirement already satisfied: python-dateutil>=2.1 in /usr/local/lib/python3.10/dist-packages (from jupyter-client->ipykernel>=4.5.1->ipywidgets<9,>=7.6.0->ipyleaflet) (2.8.2)\n","Requirement already satisfied: ptyprocess>=0.5 in /usr/local/lib/python3.10/dist-packages (from pexpect>4.3->ipython>=4.0.0->ipywidgets<9,>=7.6.0->ipyleaflet) (0.7.0)\n","Requirement already satisfied: wcwidth in /usr/local/lib/python3.10/dist-packages (from prompt-toolkit!=3.0.0,!=3.0.1,<3.1.0,>=2.0.0->ipython>=4.0.0->ipywidgets<9,>=7.6.0->ipyleaflet) (0.2.6)\n","Requirement already satisfied: platformdirs>=2.5 in /usr/local/lib/python3.10/dist-packages (from jupyter-core>=4.6.1->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets<9,>=7.6.0->ipyleaflet) (3.8.1)\n","Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.10/dist-packages (from python-dateutil>=2.1->jupyter-client->ipykernel>=4.5.1->ipywidgets<9,>=7.6.0->ipyleaflet) (1.16.0)\n","Requirement already satisfied: argon2-cffi-bindings in /usr/local/lib/python3.10/dist-packages (from argon2-cffi->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets<9,>=7.6.0->ipyleaflet) (21.2.0)\n","Requirement already satisfied: lxml in /usr/local/lib/python3.10/dist-packages (from nbconvert->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets<9,>=7.6.0->ipyleaflet) (4.9.3)\n","Requirement already satisfied: beautifulsoup4 in /usr/local/lib/python3.10/dist-packages (from nbconvert->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets<9,>=7.6.0->ipyleaflet) (4.11.2)\n","Requirement already satisfied: bleach in /usr/local/lib/python3.10/dist-packages (from nbconvert->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets<9,>=7.6.0->ipyleaflet) (6.0.0)\n","Requirement already satisfied: defusedxml in /usr/local/lib/python3.10/dist-packages (from nbconvert->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets<9,>=7.6.0->ipyleaflet) (0.7.1)\n","Requirement already satisfied: entrypoints>=0.2.2 in /usr/local/lib/python3.10/dist-packages (from nbconvert->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets<9,>=7.6.0->ipyleaflet) (0.4)\n","Requirement already satisfied: jupyterlab-pygments in /usr/local/lib/python3.10/dist-packages (from nbconvert->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets<9,>=7.6.0->ipyleaflet) (0.2.2)\n","Requirement already satisfied: mistune<2,>=0.8.1 in /usr/local/lib/python3.10/dist-packages (from nbconvert->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets<9,>=7.6.0->ipyleaflet) (0.8.4)\n","Requirement already satisfied: nbclient>=0.5.0 in /usr/local/lib/python3.10/dist-packages (from nbconvert->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets<9,>=7.6.0->ipyleaflet) (0.8.0)\n","Requirement already satisfied: packaging in /usr/local/lib/python3.10/dist-packages (from nbconvert->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets<9,>=7.6.0->ipyleaflet) (23.1)\n","Requirement already satisfied: pandocfilters>=1.4.1 in /usr/local/lib/python3.10/dist-packages (from nbconvert->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets<9,>=7.6.0->ipyleaflet) (1.5.0)\n","Requirement already satisfied: tinycss2 in /usr/local/lib/python3.10/dist-packages (from nbconvert->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets<9,>=7.6.0->ipyleaflet) (1.2.1)\n","Requirement already satisfied: fastjsonschema in /usr/local/lib/python3.10/dist-packages (from nbformat->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets<9,>=7.6.0->ipyleaflet) (2.17.1)\n","Requirement already satisfied: jsonschema>=2.6 in /usr/local/lib/python3.10/dist-packages (from nbformat->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets<9,>=7.6.0->ipyleaflet) (4.3.3)\n","Requirement already satisfied: attrs>=17.4.0 in /usr/local/lib/python3.10/dist-packages (from jsonschema>=2.6->nbformat->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets<9,>=7.6.0->ipyleaflet) (23.1.0)\n","Requirement already satisfied: pyrsistent!=0.17.0,!=0.17.1,!=0.17.2,>=0.14.0 in /usr/local/lib/python3.10/dist-packages (from jsonschema>=2.6->nbformat->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets<9,>=7.6.0->ipyleaflet) (0.19.3)\n","Requirement already satisfied: cffi>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from argon2-cffi-bindings->argon2-cffi->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets<9,>=7.6.0->ipyleaflet) (1.15.1)\n","Requirement already satisfied: soupsieve>1.2 in /usr/local/lib/python3.10/dist-packages (from beautifulsoup4->nbconvert->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets<9,>=7.6.0->ipyleaflet) (2.4.1)\n","Requirement already satisfied: webencodings in /usr/local/lib/python3.10/dist-packages (from bleach->nbconvert->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets<9,>=7.6.0->ipyleaflet) (0.5.1)\n","Requirement already satisfied: pycparser in /usr/local/lib/python3.10/dist-packages (from cffi>=1.0.1->argon2-cffi-bindings->argon2-cffi->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets<9,>=7.6.0->ipyleaflet) (2.21)\n"]}]},{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/drive', force_remount=True)"],"metadata":{"id":"U7yJbC3l9bLB","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1689227759902,"user_tz":240,"elapsed":2448,"user":{"displayName":"Haruko Wainwright","userId":"12720531295762262890"}},"outputId":"37db7c3a-3323-47c7-87be-fcfbd27ddd16"},"execution_count":12,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}]},{"cell_type":"markdown","source":["## Read Datasets"],"metadata":{"id":"IoI3R2PU-GGg"}},{"cell_type":"code","source":["import pandas as pd\n","import numpy as np\n","import pickle"],"metadata":{"id":"3zZ0Z6b4ByLG","executionInfo":{"status":"ok","timestamp":1689230025288,"user_tz":240,"elapsed":2,"user":{"displayName":"Haruko Wainwright","userId":"12720531295762262890"}}},"execution_count":49,"outputs":[]},{"cell_type":"code","source":["# Purple Air data\n","df_ppl = pd.read_csv(infile_ppl)"],"metadata":{"id":"BonSzeHa-T2k","executionInfo":{"status":"ok","timestamp":1689230231471,"user_tz":240,"elapsed":129,"user":{"displayName":"Haruko Wainwright","userId":"12720531295762262890"}}},"execution_count":73,"outputs":[]},{"cell_type":"code","source":["# EPA data\n","df_epa=pd.read_csv(infile_epa)"],"metadata":{"id":"Fsvv4oNPOD5G","executionInfo":{"status":"ok","timestamp":1689230232405,"user_tz":240,"elapsed":2,"user":{"displayName":"Haruko Wainwright","userId":"12720531295762262890"}}},"execution_count":74,"outputs":[]},{"cell_type":"markdown","source":["## Interpolated EPA data at PPL locations"],"metadata":{"id":"tPcZWIGoB8o_"}},{"cell_type":"code","source":["import gpcam\n","from gpcam.autonomous_experimenter import AutonomousExperimenterGP\n","from gpcam.gp_optimizer import GPOptimizer\n","\n","import numpy as np\n","\n","import matplotlib.pyplot as plt"],"metadata":{"id":"iqWVxXVeB79k","executionInfo":{"status":"ok","timestamp":1689230027951,"user_tz":240,"elapsed":185,"user":{"displayName":"Haruko Wainwright","userId":"12720531295762262890"}}},"execution_count":52,"outputs":[]},{"cell_type":"code","source":["# Define the kernel/covariance\n","def kernel_RBF_noise(x1, x2, hps, obj):\n","    var = hps[0]\n","    noise_var = hps[3]\n","    d1 = abs(np.subtract.outer(x1[:, 0], x2[:, 0]))\n","    d2 = abs(np.subtract.outer(x1[:, 1], x2[:, 1]))\n","    d = ((d1/hps[1])**2 + (d2/hps[2])**2)**0.5\n","    K = var * np.exp(-d ** 2)\n","    if x1 is x2:\n","        return K + noise_var * np.eye(K.shape[0])\n","    else:\n","        return K"],"metadata":{"id":"D340WGpIO0ua","executionInfo":{"status":"ok","timestamp":1689230028827,"user_tz":240,"elapsed":2,"user":{"displayName":"Haruko Wainwright","userId":"12720531295762262890"}}},"execution_count":53,"outputs":[]},{"cell_type":"code","source":["# Plot the locations and values\n","x_epa = np.column_stack((np.array(df_epa['Latitude']),np.array(df_epa['Longitude'])))\n","x_ppl = np.column_stack((np.array(df_ppl['Latitude']),np.array(df_ppl['Longitude'])))\n","\n","plt.scatter(x_epa[:,1],x_epa[:,0],c=df_epa['AQI'],marker='s')\n","plt.scatter(x_ppl[:,1],x_ppl[:,0],c=df_ppl['AQI'],marker='o')\n","plt.legend(['EPA','PuepleAir'])\n","plt.colorbar()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":448},"id":"u6o-j8LAQnJp","executionInfo":{"status":"ok","timestamp":1689230030511,"user_tz":240,"elapsed":603,"user":{"displayName":"Haruko Wainwright","userId":"12720531295762262890"}},"outputId":"9175769c-347d-4623-fff6-59159a5837bd"},"execution_count":54,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.colorbar.Colorbar at 0x7b7536c5e6e0>"]},"metadata":{},"execution_count":54},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 2 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["# Training data: locations (latitude, longitude) and AQI values at the sensor locations\n","x_train = x_epa\n","y_train = np.array(df_epa['AQI'])\n","\n","# Range of coordinates\n","param_bounds = np.array([[x_train[:,0].min(), x_train[:,0].max()],\n","                [x_train[:,1].min(), x_train[:,1].max()]])\n","# Initial hyperparameter values\n","init_hp = np.array([np.var(y_train),1.,1., np.var(y_train)*0.01])\n","\n","# Range of hyperparameters\n","hp_bounds = np.array([[np.var(y_train)*0.7,np.var(y_train)*1.3],[0.1,2.0],[0.1,2.0],[np.var(y_train)*0.01,np.var(y_train)*0.1]])"],"metadata":{"id":"EaOstuSYOuG2","executionInfo":{"status":"ok","timestamp":1689230032767,"user_tz":240,"elapsed":135,"user":{"displayName":"Haruko Wainwright","userId":"12720531295762262890"}}},"execution_count":55,"outputs":[]},{"cell_type":"code","source":["my_ae = AutonomousExperimenterGP(param_bounds,\n","                                 init_hp,\n","                                 hp_bounds,\n","                                 init_dataset_size= 100,\n","                                 x_data=x_train,\n","                                 y_data=y_train,\n","                                 kernel_func = kernel_RBF_noise,\n","                                 use_inv = True,\n","                                 communicate_full_dataset = False,\n","                                 ram_economy = False)#, info = False, prior_mean_func = optional_mean_func)\n","my_ae.train(max_iter=10000)"],"metadata":{"id":"JftAPy_4O6aY","executionInfo":{"status":"ok","timestamp":1689230035027,"user_tz":240,"elapsed":854,"user":{"displayName":"Haruko Wainwright","userId":"12720531295762262890"}}},"execution_count":56,"outputs":[]},{"cell_type":"code","source":["f = my_ae.gp_optimizer.posterior_mean(x_ppl)[\"f(x)\"]"],"metadata":{"id":"L3VIXdqcCYzO","executionInfo":{"status":"ok","timestamp":1689230237890,"user_tz":240,"elapsed":122,"user":{"displayName":"Haruko Wainwright","userId":"12720531295762262890"}}},"execution_count":75,"outputs":[]},{"cell_type":"markdown","source":["## Define the transfer function from Puple Air to EPA data"],"metadata":{"id":"zph4iCk2mWS1"}},{"cell_type":"code","source":["import matplotlib.pyplot as plt\n","from scipy import stats\n","from sklearn.linear_model import Ridge"],"metadata":{"id":"7JejQHzaBZB5","executionInfo":{"status":"ok","timestamp":1689230222183,"user_tz":240,"elapsed":123,"user":{"displayName":"Haruko Wainwright","userId":"12720531295762262890"}}},"execution_count":72,"outputs":[]},{"cell_type":"code","source":["# Regression\n","slope, intercept, r_value, p_value, std_err = stats.linregress(f,df_ppl['AQI'] )\n","ln = slope*np.array([0,120])+intercept"],"metadata":{"id":"Qe-Nq7wE5ifc","executionInfo":{"status":"ok","timestamp":1689230240187,"user_tz":240,"elapsed":112,"user":{"displayName":"Haruko Wainwright","userId":"12720531295762262890"}}},"execution_count":76,"outputs":[]},{"cell_type":"code","source":["plt.plot(f,df_ppl['AQI'],'o')\n","plt.plot(np.array([0,120]),ln,'k')\n","plt.xlabel('Estimated AQI at PPL locations')\n","plt.ylabel('PPL AQI')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":467},"id":"atZFhxjvBkL8","executionInfo":{"status":"ok","timestamp":1689230243280,"user_tz":240,"elapsed":360,"user":{"displayName":"Haruko Wainwright","userId":"12720531295762262890"}},"outputId":"06266af1-fde3-4103-cbd3-9f9c4a88390d"},"execution_count":77,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Text(0, 0.5, 'PPL AQI')"]},"metadata":{},"execution_count":77},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["df_ppl['AQI'] = (df_ppl['AQI'] - intercept)/slope"],"metadata":{"id":"0QK06Ej89Zns","executionInfo":{"status":"ok","timestamp":1689230246356,"user_tz":240,"elapsed":189,"user":{"displayName":"Haruko Wainwright","userId":"12720531295762262890"}}},"execution_count":78,"outputs":[]},{"cell_type":"code","source":["plt.scatter(x_epa[:,1],x_epa[:,0],c=df_epa['AQI'],marker='s')\n","plt.scatter(x_ppl[:,1],x_ppl[:,0],c=df_ppl['AQI'],marker='o')\n","plt.legend(['EPA','PuepleAir'])\n","plt.colorbar()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":448},"id":"gg8Yl89NSex8","executionInfo":{"status":"ok","timestamp":1689230257355,"user_tz":240,"elapsed":488,"user":{"displayName":"Haruko Wainwright","userId":"12720531295762262890"}},"outputId":"3290ea23-f9f4-46c0-eaf7-d6f4126d4a3f"},"execution_count":80,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.colorbar.Colorbar at 0x7b75366b3dc0>"]},"metadata":{},"execution_count":80},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 2 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["# Save the regression parameters for further integration\n","import pickle\n","ppl2epa = {'slope':slope,'intercept':intercept,'err':std_err}\n","f = open(file_ppl2epa,\"wb\")\n","pickle.dump(ppl2epa,f)\n","f.close()"],"metadata":{"id":"p8MKxYr2TWkw","executionInfo":{"status":"ok","timestamp":1689230274297,"user_tz":240,"elapsed":125,"user":{"displayName":"Haruko Wainwright","userId":"12720531295762262890"}}},"execution_count":81,"outputs":[]}]}